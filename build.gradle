plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
}

group = 'com.librari'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
}


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
jacoco {
	toolVersion = "0.8.7"
}

test {
	jacoco {
		enabled = true
	}
}

//jacocoTestCoverageVerification {
//	dependsOn jacocoTestReport
//	violationRules {
//		rule {
//			limit {
//				minimum = 0.8
//			}
//		}
//	}
//	classDirectories.setFrom(
//			files(classDirectories.files.collect {
//				fileTree(dir: it, exclude: [
//						'com/library/api/DemoApplication.class'
//				])
//			})
//	)
//}


jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}
tasks.withType(Test).configureEach {
	jacoco {
		excludes += ['com.library.api.DemoApplication',
		'com.library.api.context.*']

	}
}

